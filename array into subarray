"""
Question: Array into sub-array
You have been given an array A of N integers. 
Divided it into 3 non-empty sub-arrays, such that sum of each sub-array can be represented in form of 2^k. K is a whole number.
Eg. A = [1, 2, 3, 1]
A can be divided into [1], [2], [3, 1]. These have sum of 1 = 2^0, 2 = 2^1, and 4 = 2^2. 
You can add 1 at any index of array. You can do add any number of time. 
You need to find minimum number of times, 1 should be added such that all three sub-array is in 2^k form.
Input: 
T : Number of test cases.
N : length of array
A : array
Constrains
1 <= N <= 1000
1 <= A[i] <= 100
All input are integers.
Input Format:
First line contain T
Second line contain size of array.
Third line contain array of votes received
Output Format: 
Each separate line for each testcase results.
Sample input:
1
3
2 1 3
Sample output:
1
Explanation: 
This can be divided into [2], [1], and [3, 1]; which does satisfy 2^k form.
"""


#include <iostream>

#include <vector>
using namespace std;

vector<int> expo = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};

int diff(int x) {

  for (auto i : expo) {

    if (x == i) {
      return 0;
    } else if (x < i) {
      return i - x;
    }
  }
}

int main() {

  vector<int> arr;
  int t, n;
  int total = 0;

  cin >> t;
  while (t > 0) {
    total = 0;
    cin >> n;

    arr.resize(n);
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
    }

    for (int i = 0; i < n; i++) {
      total += arr[i];
    }
    // cout << "total" << total << endl;

    int sumA = 0, ansA = 1, sumB = 0, ansB = 1, sumC = 0, ones = 0, temp = 0,
        ans = INT8_MAX;
    for (int i = 1; i < n - 1; i++) {
      ones = 0;
      sumC = 0;
      temp = arr[i - 1];
      sumA += temp;
      // cout << "sumA" << sumA << endl;
      ansA = diff(sumA);
      // cout << "ansA" << ansA << endl;
      sumC = total - sumA;
      // cout << "sumC" << sumC << endl;

      sumB = 0;
      ansB = 1;
      for (int j = i + 1; j < n; j++) {
        temp = arr[j - 1];
        sumB += temp;
        // cout << "sumB" << sumB << endl;
        ansB = diff(sumB);
        // cout << "ansB" << ansB << endl;
        sumC -= temp;
        // cout << "sumC" << sumC << endl;

        ones = ansA + ansB + diff(sumC);
        // cout << "ones" << ones << endl;
        if (ans > ones) {
          ans = ones;
          // cout << "ans" << ans << endl;
        }
      }
    }
    cout << "ans" << ans << endl;
    t--;
  }
}
